services:
   backend:
      build: .
      container_name: contests-tool-backend
      restart: unless-stopped
      env_file:
         - ".env.docker"
      depends_on:
         db:
            condition: service_healthy
         redis:
            condition: service_healthy
      volumes:
         - image-storage:/app/storage/images
         - cover-storage:/app/storage/covers
         - telegram-bot-api-data:/var/lib/telegram-bot-api
      ports:
         - "9092:9092"
      healthcheck:
         test: ["CMD", "curl", "-f", "http://backend:9092/health"]
         interval: 30s
         timeout: 5s
         retries: 3
         start_period: 10s

   db:
      image: postgres:17
      container_name: contests-tool-postgres
      restart: unless-stopped
      environment:
         POSTGRES_USER: ${PGSQL_USER}
         POSTGRES_PASSWORD: ${PGSQL_PASS}
         POSTGRES_DB: ${PGSQL_NAME}
      healthcheck:
         test: ["CMD-SHELL", "pg_isready -U ${PGSQL_USER}"]
         interval: 10s
         timeout: 5s
         retries: 5
      volumes:
         - postgres_data:/var/lib/postgresql/data

   redis:
      image: redis:7-alpine
      container_name: contests-tool-redis
      restart: unless-stopped
      healthcheck:
         test: ["CMD", "redis-cli", "ping"]
         interval: 5s
         timeout: 3s
         retries: 5
      volumes:
         - redis_data:/data
      command: ["redis-server", "--appendonly", "yes"]

   telegram-bot-api:
      image: aiogram/telegram-bot-api:latest
      restart: unless-stopped
      environment:
         TELEGRAM_API_ID: ${TELEGRAM_API_ID}
         TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
         TELEGRAM_HTTP_PORT: 9091
         TELEGRAM_LOCAL: true
      volumes:
         - image-storage:/app/storage/images
         - cover-storage:/app/storage/covers
         - telegram-bot-api-data:/var/lib/telegram-bot-api
      ports:
         - "9091:9091"

volumes:
   postgres_data:
   redis_data:
   telegram-bot-api-data:
   image-storage:
   cover-storage:
